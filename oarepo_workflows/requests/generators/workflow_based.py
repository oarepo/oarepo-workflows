#
# Copyright (C) 2024 CESNET z.s.p.o.
#
# oarepo-workflows is free software; you can redistribute it and/or
# modify it under the terms of the MIT License; see LICENSE file for more
# details.
#
"""Generators for needs/excludes/queries based on workflows."""

from __future__ import annotations

from typing import TYPE_CHECKING, Any, cast, override

from oarepo_runtime.services.generators import Generator
from opensearch_dsl.query import Query

from oarepo_workflows.errors import (
    EventTypeNotInWorkflowError,
    InvalidWorkflowError,
    MissingWorkflowError,
    RequestTypeNotInWorkflowError,
)
from oarepo_workflows.proxies import current_oarepo_workflows

if TYPE_CHECKING:
    from collections.abc import Sequence

    from flask_principal import Need
    from invenio_records_resources.records import Record
    from invenio_requests.customizations import EventType, RequestType
    from invenio_requests.records.api import Request
    from invenio_search.engine import dsl

    from oarepo_workflows import Workflow, WorkflowRequest


class MissingTopicError(ValueError):
    """Raised when the topic is missing in the request generator arguments."""


class RequestPolicyWorkflowCreators(Generator):
    # TODO: too cryptic
    """Base class that generates creators from a workflow request."""

    def _kwargs_parser(self, **kwargs: Any) -> dict[str, Any]:
        """Transform the kwargs for subsequent methods."""
        return kwargs

    def _requester_generator(self, workflow: Workflow, workflow_request: WorkflowRequest, **kwargs: Any) -> Generator:
        """Return the requesters as a single requester generator."""
        raise NotImplementedError

    def _get_workflow_request(self, request_type: RequestType, **kwargs: Any) -> tuple[Workflow, WorkflowRequest]:
        """Return the workflow request from the context."""
        if "record" not in kwargs:
            raise MissingTopicError("Topic not found in request permissions generator arguments, can't get workflow.")
        record = kwargs["record"]
        workflow = current_oarepo_workflows.get_workflow(record)
        workflow_requests = workflow.requests()
        try:
            workflow_request = workflow_requests.requests_by_id[request_type.type_id]
        except KeyError as e:
            raise RequestTypeNotInWorkflowError(
                request_type=request_type.type_id,
                workflow_code=workflow.code,
            ) from e
        return workflow, workflow_request

    def needs(self, **context: Any) -> Sequence[Need]:  # type: ignore[override]
        """Return the needs generated by the workflow permission."""
        try:
            context = self._kwargs_parser(**context)
            workflow, workflow_request = self._get_workflow_request(**context)
            generator = self._requester_generator(workflow, workflow_request, **context)
            return generator.needs(**context)
        except (MissingWorkflowError, InvalidWorkflowError, MissingTopicError):
            return []

    def excludes(self, **context: Any) -> Sequence[Need]:
        """Return the needs excluded by the workflow permission."""
        try:
            context = self._kwargs_parser(**context)
            workflow, workflow_request = self._get_workflow_request(**context)
            generator = self._requester_generator(workflow, workflow_request, **context)
            return generator.excludes(**context)
        except (MissingWorkflowError, InvalidWorkflowError, MissingTopicError):
            return []

    # not tested
    def query_filter(
        self, record: Record | None = None, request_type: RequestType | None = None, **context: Any
    ) -> dsl.query.Query:
        """Return the query filter generated by the workflow permission."""
        try:
            context = self._kwargs_parser(**context)
            generator = self._requester_generator(record=record, request_type=request_type, **context)
            return generator.query_filter(record=record, request_type=request_type, **context)
        except (MissingWorkflowError, InvalidWorkflowError, MissingTopicError):
            return Query("match_none")


class RequestCreatorsFromWorkflow(RequestPolicyWorkflowCreators):
    """Generates creators from a workflow request to be used in the request 'create' permission."""

    @override
    def _requester_generator(self, workflow, workflow_request, **kwargs: Any) -> Generator:
        return workflow_request.requester_generator


class EventCreatorsFromWorkflow(RequestPolicyWorkflowCreators):
    """Generates creators from a workflow request to be used in the event 'create' permission."""

    @override
    def _kwargs_parser(self, **kwargs: Any) -> dict[str, Any]:
        request: Request = kwargs["request"]
        kwargs.setdefault("request_type", request.type)
        try:
            # Cannot access attribute "resolve" for class "ReferencedEntityField"
            kwargs["record"] = request.topic.resolve()  # type: ignore[reportOptionalMemberAccess]
        except Exception as e:
            raise MissingTopicError(
                "Topic not found in request event permissions generator arguments, can't get workflow."
            ) from e
        return kwargs

    @override
    def _requester_generator(self, workflow: Workflow, workflow_request: WorkflowRequest, **kwargs: Any) -> Generator:
        event_type: EventType = kwargs["event_type"]
        request_type: RequestType = kwargs["request_type"]
        try:
            workflow_event = workflow_request.allowed_events[cast("str", event_type.type_id)]
        except KeyError as e:
            raise EventTypeNotInWorkflowError(
                request_type=request_type.type_id,
                workflow_code=workflow.code,
                event_type=cast("str", event_type.type_id),
            ) from e
        return workflow_event.submitter_generator
